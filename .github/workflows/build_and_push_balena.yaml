name: Build and Push to ECR

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::881035316704:role/ECR-github
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: devops_tester
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: wait for ecr scan to complete
        id: scan
        run: aws ecr describe-image-scan-findings --repository-name devops_tester --image-id imageTag=$IMAGE_TAG --query 'imageScanStatus.status' --output text
#          |
#          REPO_NAME="my-app"
#          IMAGE_TAG="latest"
#          SCAN_STATUS="IN_PROGRESS"
#          while [ "$SCAN_STATUS" == "IN_PROGRESS" ]; do
#            aws ecr describe-image-scan-findings --repository-name devops_tester --image-id imageTag=$IMAGE_TAG --query 'imageScanStatus.status' --output text
#            SCAN_STATUS=$(aws ecr describe-image-scan-findings --repository-name devops_tester --image-id imageTag=$IMAGE_TAG --query 'imageScanStatus.status' --output text)
#            echo "Scan status: $SCAN_STATUS"
#            sleep 30
#          done
#          if [ "$SCAN_STATUS" != "COMPLETE" ]; then
#            echo "Scan failed or did not complete."
#            exit 1
#          fi
      - name: Deploy to Balena Cloud
        env:
          BALENA_API_KEY: ${{ secrets.BALENA_API_KEY }}
          BALENA_APP_NAME: "my-balena-app"
        run: |
          IMAGE_URL
          curl -X PATCH "https://api.balena-cloud.com/v6/application(\$filter=app_name eq '$BALENA_APP_NAME')" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $BALENA_API_KEY" \
            --data "{\"build\":{\"service1\":{\"image\":\"$IMAGE_URL\"}}}"

