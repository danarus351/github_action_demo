name: Build and Push to ECR

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      ECR_REPOSITORY: ${{ steps.publish_ecr.outputs.ECR_REPOSITORY }}
      ECR_REGISTRY: ${{ steps.publish_ecr.outputs.ECR_REGISTRY }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::881035316704:role/ECR-github
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        id: publish_ecr
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: devops_tester
          IMAGE_TAG: latest
        run: |
          echo "blah"
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_OUTPUT

#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#
#      - name: Wait for ECR scan to complete
#        run: |
#            sleep 30
#            aws ecr wait image-scan-complete --repository-name devops_tester --image-id imageTag=latest
#
#      - name: Check for High Vulnerabilities
#        run: |
#         SCAN_FINDINGS=$(aws ecr describe-image-scan-findings --repository-name devops_tester --image-id imageTag=latest --query "imageScanFindings.findingSeverityCounts.CRITICAL" --output json)
#          if [ "$SCAN_FINDINGS" != "null" ]; then
#            echo "Critical vulnerabilities found:"
#            echo "$SCAN_FINDINGS"
#            exit 1
#          else
#            echo "No high vulnerabilities found."
#          fi
      - name: Publish veriable to second
        id: publish_vars
        run: |
          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY=devops_tester" >> $GITHUB_OUTPUT


  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - env:
          ECR_REPOSITORY: ${{ needs.build-and-push.outputs.ECR_REPOSITORY }}
          ECR_REGISTRY: ${{ needs.build-and-push.outputs.ECR_REGISTRY }}
        run: |
            echo "$ECR_REPOSITORY/ $ECR_REGISTRY"
      - name: list docker
        run: docker ps




#      - name: Deploy to Balena Cloud
#        env:
#          BALENA_API_KEY: ${{ secrets.BALENA_API_KEY }}
#          BALENA_APP_NAME: "my-balena-app"
#        run: |
#          curl -X PATCH "https://api.balena-cloud.com/v6/application(\$filter=app_name eq '$BALENA_APP_NAME')" \
#            -H "Content-Type: application/json" \
#            -H "Authorization: Bearer $BALENA_API_KEY" \
#            --data "{\"build\":{\"service1\":{\"image\":\"$IMAGE_URL\"}}}"

