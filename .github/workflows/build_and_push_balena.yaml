name: Build and Push to ECR

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::881035316704:role/ECR-github
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: devops_tester
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Wait for ECR scan to complete
        run: |
            aws ecr wait image-scan-complete --repository-name devops_tester --image-id imageTag=latest
          
      - name: Check for High Vulnerabilities
        run: |
          SCAN_FINDINGS=$(aws ecr describe-image-scan-findings --repository-name devops_tester --image-id imageTag=latest --query 'imageScanFindings.findings[?severity==`HIGH`]' --output json)
          if [ "$SCAN_FINDINGS" != "[]" ]; then
            echo "High vulnerabilities found:"
            echo "$SCAN_FINDINGS"
            exit 1
          else
            echo "No high vulnerabilities found."
          fi


  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
#    - name: Scan Docker image
#        id: docker-scan
#        uses: alexjurkiewicz/ecr-scan-image@v1.7.1
#        with:
#          repository: myorg/myimage
#          tag: ${{ steps.docker-build.outputs.tag }}
#          # fail_threshold: medium
#          # ignore_list: |
#          #   CVE-2014-7654321
#          #   CVE-2014-456132
#          # Access scan results in later steps
#          - run: echo "${{ steps.docker-scan.outputs.total }} total vulnerabilities."

      - name: Deploy to Balena Cloud
        env:
          BALENA_API_KEY: ${{ secrets.BALENA_API_KEY }}
          BALENA_APP_NAME: "my-balena-app"
        run: |
          IMAGE_URL
          curl -X PATCH "https://api.balena-cloud.com/v6/application(\$filter=app_name eq '$BALENA_APP_NAME')" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $BALENA_API_KEY" \
            --data "{\"build\":{\"service1\":{\"image\":\"$IMAGE_URL\"}}}"

